generator client {
  binaryTargets = ["windows", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
  provider      = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  cognitoId  String?    @unique
  email      String     @unique
  phone      String
  name       Name
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  accounts   Account[]
  cards      Card[]
  Transfer   Transfer[]

  @@map("users")
}

type Name {
  first String
  last  String
}

model Category {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  description String
  color       String
  type        CategoryType
  parentId    String?      @db.ObjectId
  parent      Category?    @relation("parent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childs      Category[]   @relation("parent")

  @@map("categories")
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Account {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @db.ObjectId
  description     String
  balance         Float
  type            AccountType
  originTransfer  Transfer[]  @relation("origin")
  targetTransfers Transfer[]  @relation("target")

  @@map("accounts")
}

enum AccountType {
  WALLET
  SAVINGS
  INVESTMENTS
  CHEQUING
}

model Card {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  name      String
  brand     Brand
  dueDate   Int
  limit     Int

  @@map("cards")
}

enum Brand {
  MASTERCARD
  VISA
  AMEX
}

model Transfer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  origin      Account  @relation(name: "origin", fields: [originId], references: [id])
  originId    String   @db.ObjectId
  target      Account  @relation(name: "target", fields: [targetId], references: [id])
  targetId    String   @db.ObjectId
  description String?
  date        DateTime
  value       Float

  @@map("transfers")
}
